                         Node js
                -------------------------

1. js runtime enviornment + JS library 

2. Features->

      - Extremely faster
      - Asynchronous Programming
      - Single Threaded with event loop (only a single callStack is available in node)(event loop checks whether the stack is empty or not ..if it is empty it calls priority queue, when priority queue become empty it calls callback queue ..these senario is called callback hell)
      - Highly Scalable
      - Open Source
      
3. Node JS Global Objects-> 

      - It can access anywhere from Node js app without exporting / importing
      - eg: console.log(),setTimeout()...etc

4. Node JS Module System->

     -  Each file node js is considered as seperate module. To reuse module we have to export and import
     - To import a module : use require('module name') method          ( module name = path of module)
     - To export a module : use module.exports / exports keyword
     
     - Build in modules->

          - fs      : file system - handling file related events
          - http    : generating http request
          - https   : generating https request
          - event   : generating event
          - crypto  : tool like encryption,hashing etc
          - process : used to provide currently running process information
                     - enviornmental variable : used to store runtime values

5. Node JS  Packages->
      
      - used to help solving common problems
      - collection of node_modules and package.json
      - install package : npm i package-name
      - it will create create package.json : npm configuration file for project
      - node_modules folder : used to hold copies of installed packages      
      - package-lock.json : to hold versions of installed packages

6. Backends concepts->

      - Client-Server architecture : Sending request and response between 2 applications
      - API : Application programming Interfaces
              - RESTful API : http request with json data
      - CRUD : create , read , update , delete
      - CORS : Cross Origin Resource Sharing



                        Express JS
            ----------------------------------------------


1. Framework for resolving Client Server app of Node JS

2. Create a Server Folder 
3. create package.json file : npm init -y
4. Update start command as  "start": "node index.js" in script of package.json file 
5. Install Packages :

            - Express : npm i express
            - cors    : npm i cors         
            - dotenv  : npm i dotenv

6. Create .env file to hold enviornmental variables
7. Create .gitignore file to add file to ignore while adding to git
8. Create index.js file to define server

            - import dotenv
            - import express
            - import cors
            - creating express server
            - use following in server
                   - cors 
                   - parser for json
            - customise port to listen http request
            - run server app
9. create Routes Folder in server to define Routes
           
            - create router.js file
                    - import express
                    - create router object of express to define path
                    - using router object define path
                    - to define logic to resolve http rewquest , redirect it to its controller

10. Create controller folder in server to define logic to solve API 
           
           - Create controller.js file
                     - Create function to solve request
            
11.  MONGODB->

      1. Node js library to communicate MONGODB
      2. install mongoose : npm i mongoose
      3. create db folder  for define db connection using mongoose 
            - create a js file to define connectivity
            - import mangoose
            - get connection string from process.env
            - connect mongodb with node using mangoose
            - import connection.js file in index.js

      4. Schema :  schema maps to a MongoDB collection and defines the shape of the documents within that collection
      5. Model  :   

      